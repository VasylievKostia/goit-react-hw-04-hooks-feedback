{"version":3,"sources":["components/FeedbackOptions/FeedbackOptions.module.css","components/Statiscs/Statistics.module.css","components/Section/Section.module.css","components/Notification/Notification.js","components/Statiscs/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","className","s","list","FeedbackOptions","onHandleGood","onHandleNeutral","onHandleBad","type","button","onClick","Section","title","children","sectoin","App","useState","goodPoints","setGoodPoints","neutralPoints","setNeutralPoints","badPoints","setBedPoints","countTotalFeedback","prev","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,OAAS,kC,mBCA3BD,EAAOC,QAAU,CAAC,KAAO,2B,gBCAzBD,EAAOC,QAAU,CAAC,QAAU,2B,qICDrB,SAASC,EAAT,GAAkC,IAAXC,EAAU,EAAVA,QAC1B,OACI,4BAAIA,ICEL,SAASC,EAAT,GAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBACpD,OACA,gCACI,4CACKD,EACD,gCACI,qBAAIE,UAAWC,IAAEC,KAAjB,UACI,wCAAWP,KACX,2CAAcC,EAAd,OACA,uCAAUC,QAEd,wCAAWC,KACX,oDAAuBC,EAAvB,UAEE,cAACP,EAAD,CAAcC,QAAQ,yB,oBCfjC,SAASU,EAAT,GAA0E,IAA/CC,EAA8C,EAA9CA,aAAcC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,YAC7D,OAAQ,+BACJ,wBAAQC,KAAK,SAASP,UAAWC,IAAEO,OAAQC,QAASL,EAApD,kBACA,wBAAQG,KAAK,SAASP,UAAWC,IAAEO,OAAQC,QAASJ,EAApD,qBACA,wBAAQE,KAAK,SAASP,UAAWC,IAAEO,OAAQC,QAASH,EAApD,oB,oBCLD,SAASI,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC7B,OACI,0BAASZ,UAAWC,IAAEY,QAAtB,UACI,6BAAKF,IACJC,KC4CEE,MA7Cf,WACE,MAAoCC,mBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0CF,mBAAS,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAkCJ,mBAAS,GAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAEMC,EAAqB,kBACzBN,EAAaE,EAAgBE,GAoB/B,OAAS,8BACH,eAACV,EAAD,CAASC,MAAM,wBAAf,UACE,cAACR,EAAD,CACEC,aAlBU,WAClBa,GAAc,SAAAM,GACb,OAAOA,EAAO,MAiBPlB,gBAda,WACrBc,GAAiB,SAAAI,GAChB,OAAOA,EAAO,MAaPjB,YAVS,WACjBe,GAAa,SAAAE,GACZ,OAAOA,EAAO,QAWT,cAAC7B,EAAD,CACEC,KAAMqB,EACNpB,QAASsB,EACTrB,IAAKuB,EACLtB,MAAOwB,IACPvB,mBA9BRyB,KAAKC,MAAmB,IAAbT,EAAmBM,aCFnBI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cf5c725b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__3gjhR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__AuAWp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectoin\":\"Section_sectoin__1HfGV\"};","export function Notification({message}) {\r\n    return (\r\n        <p>{message}</p>     \r\n    )\r\n}","import s from './Statistics.module.css'\r\nimport { Notification} from '../Notification/Notification.js'\r\n\r\n\r\nexport function Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n    return (\r\n    <div>\r\n        <h3>Statistics</h3>\r\n            {total ?\r\n            <div>\r\n                <ul className={s.list}>\r\n                    <li>good: {good }</li>\r\n                    <li>neutral: {neutral} </li>\r\n                    <li>bad: {bad}</li>\r\n                </ul>\r\n                <p>total: {total}</p>\r\n                <p>Positive feedback: {positivePercentage}%</p>\r\n            </div>\r\n                : <Notification message=\"No feedback given\"></Notification>}\r\n    \r\n    </div>\r\n            )\r\n}","import s from './FeedbackOptions.module.css'\r\n\r\n\r\nexport function FeedbackOptions({ onHandleGood, onHandleNeutral, onHandleBad }) {\r\n    return (<ul>\r\n        <button type=\"button\" className={s.button} onClick={onHandleGood}>good</button>\r\n        <button type=\"button\" className={s.button} onClick={onHandleNeutral}>neutral</button>\r\n        <button type=\"button\" className={s.button} onClick={onHandleBad}>bad</button> \r\n    </ul>)\r\n}\r\n","import s from \"../Section/Section.module.css\"\r\n\r\nexport function Section({ title, children }) {\r\n    return (\r\n        <section className={s.sectoin}>\r\n            <h2>{title}</h2>\r\n            {children}\r\n        </section>     \r\n    )\r\n}","import react, { useState } from \"react\";\nimport { Statistics } from \"./components/Statiscs/Statistics\"\nimport { FeedbackOptions} from './components/FeedbackOptions/FeedbackOptions'\nimport { Section } from \"./components/Section/Section\"\n\nfunction App() {\n  const [goodPoints, setGoodPoints] = useState(0)\n  const [neutralPoints, setNeutralPoints] = useState(0)\n  const [badPoints, setBedPoints] = useState(0)\n\n  const countTotalFeedback = () => (\n    goodPoints + neutralPoints + badPoints\n  )\n  const countPositiveFeedbackPercentage = () => (\n    Math.floor(goodPoints * 100 / countTotalFeedback())\n  )\n  const handlerGood = () => {\n    setGoodPoints(prev => {\n     return prev + 1\n   })\n  };\n  const handlerNeutral = () => {\n    setNeutralPoints(prev => {\n     return prev + 1\n   })\n  }\n  const handlerBad = () => {\n    setBedPoints(prev => {\n     return prev + 1\n   })\n  }\n  return ( <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            onHandleGood={handlerGood}\n            onHandleNeutral={handlerNeutral}\n            onHandleBad={handlerBad}\n          />\n\n          <Statistics\n            good={goodPoints}\n            neutral={neutralPoints}\n            bad={badPoints}\n            total={countTotalFeedback()}\n            positivePercentage={countPositiveFeedbackPercentage()}\n          />\n          {/* <Notification message=\"No feedback given\"></Notification> */}\n        </Section>\n      </div> );\n}\nexport default App;\n// class App extends Component {\n//   state = {\n//     goodPoints: 0,\n//     neutralPoints: 0,\n//     badPoints: 0 \n//   }\n  // countTotalFeedback = () => (\n  //   this.state.goodPoints + this.state.neutralPoints + this.state.badPoints\n  // )\n  // countPositiveFeedbackPercentage = () => (\n  //   Math.floor(this.state.goodPoints * 100 / this.countTotalFeedback())\n  // )\n  // handlerGood = () => {\n  //   this.setState((prevState) => {\n  //     // console.log(this.state)\n  //     return {\n  //       goodPoints: prevState.goodPoints + 1,\n  //     };\n  //   });\n  // };\n  // handlerNeutral = () => {\n  //   this.setState((prevState) => {\n  //     return {\n  //       neutralPoints: prevState.neutralPoints + 1\n  //     }\n  //   })\n  // }\n  // handlerBad = () => {\n  //   this.setState((prevState) => {\n  //     return {\n  //       badPoints : prevState.badPoints + 1\n  //     }\n  //   })\n  // }\n//   render() {\n  // return (\n    \n  //   <div>\n  //     <Section title=\"Please leave feedback\">\n  //     <FeedbackOptions\n  //       onHandleGood={ this.handlerGood}\n  //       onHandleNeutral={ this.handlerNeutral}\n  //       onHandleBad={this.handlerBad }\n  //     />\n\n  //     <Statistics\n  //       good={this.state.goodPoints}\n  //       neutral={this.state.neutralPoints}\n  //       bad={this.state.badPoints}\n  //       total={this.countTotalFeedback ()}\n  //       positivePercentage={this.countPositiveFeedbackPercentage()}\n  //       />\n  //       {/* <Notification message=\"No feedback given\"></Notification> */}\n  //     </Section>\n  //   </div>\n\n  // );\n// }\n// }\n// export default App;\n\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}